#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <omp.h>

struct varian{											//inisialisasi struct untuk varian rasa
	char flavor[20];									//flavor untuk rasa/nama minuman
	int price;											//harga minuman
	int laku;											//jumlah laku terjual minuman
	struct varian *next;								//untuk pointer ke node berikutnya
};

// fungsi yang dipakai pada program
void menu(struct varian** ref); 										//fungsi untuk menu awal
void admin(struct varian** ref); 										//fungsi untuk menu admin
void konsumen(struct varian** ref);										//fungsi untuk menu konsumen
int input(struct varian** ref); 							//fungsi untuk menu input minuman serta data lainnya
void inputlist(struct varian** ref, char name[], int harga, int jual); 	//fungsi untuk menu input lewat linked list
void list(struct varian** ref, int *jumlah); 							//fungsi untuk menampilkan list minuman yang sudah diinput serta akan diurutkan
void beli(struct varian** ref); 										//fungsi untuk pembelian yang diatur oleh admin 
int searchlist(struct varian** ref, int nomor, int kode);				//fungsi untuk search
void back(struct varian** ref); 										//fungsi untuk kembali ke menu awal
void del_node(struct varian** ref, char name[]);			//fungsi untuk menghapus node

int main(){
	struct varian *head = NULL; 						//inisialisasi head linked list
	
	FILE *buka = fopen("file.txt", "r");				//membuka file txt dengan mode read
	
	if(buka == NULL){									//error handling
		printf("Belum ada file!\n");
	}
	
	char line[1000];												//inisialisasi varibel
	while(fgets(line, sizeof(line), buka) != NULL){					//menerima string dari file ke variabel line sesuai ukuran file				
		struct varian *pindah = malloc(sizeof(struct varian));		//alokasi memori struct varian*pindah
		int harga, laku;
		char rasa[250];
		if (sscanf(line, "%[^;];%d;%d", rasa, &harga, &laku) == 3){	//memindahkan data dari file ke linked list
			strcpy(pindah->flavor, rasa);
			pindah->price = harga;
			pindah->laku = laku;
		}
		
		pindah->next = head;
		head = pindah;
	}
	
	menu(&head);	//memanggil fungsi menu
}

void menu(struct varian** ref){
	struct varian *awal = *ref; 			//inisialisasi struct baru untuk passing parameter struct linked list

	int pilih;								//inisialisasi variabel yang akan digunakan
	
	printf("Masuk sebagai? ");				//dialog untuk menanyakan user merupakan admin atau konsumen
	printf("\n1. Admin\n2. Konsumen\n");
	printf("Masukkan disini: ");
	scanf("%d", &pilih);					
	
	//if statement untuk memasuki menu berikutnya (admin atau bukan)
	if (pilih == 1){
		system("cls");
		admin(&awal);		//memanggil menu admin
	}
	else if (pilih == 2){
		system("cls");
		konsumen(&awal);		//memanggil menu konsumen
	}
}

void admin(struct varian** ref){
	struct varian *test = *ref; 								//inisialisasi struct baru untuk passing parameter struct linked list
	int pilih, kodeadmin, pilih2, kodelist, jumlah; 			//inisialisasi variabel yang akan digunakan
	char del_name[20];											//inisialisasi variabel untuk menghapus node
	
	printf("Masukkan Kode Admin: ");	//dialog untuk password masuk sebagai admin yang sudah ditentukan sistem
	scanf("%d", &kodeadmin);
	
	//if statement apabila user berhasil atau tidak memasukkan password
	if (kodeadmin == 7815){			
		printf("Fitur yang tersedia:");
		printf("\n1. Input Keterangan Minuman\n2. Hapus Varian Minuman");		//pilihan fitur pada program admin
	
		do{																		//do-while loop sebagai error handling
			printf("\nSilahkan pilih fitur: ");
			scanf("%d", &pilih);
			if (pilih != 1 && pilih != 2){
				printf("Masukkan angka yang sesuai!");
			}
		}while (pilih != 1 && pilih != 2);
	
		if (pilih == 1){
			system("cls");
			input(&test);													//memanggil fungsi input
		}
		else if(pilih == 2){
			system("cls");
			struct varian *liat = *ref;				//inisialisasi struct baru untuk looping display
	
			printf("| %-30s | %-20s | %-15s |\n", "Varian Minuman", "Harga (Rp)", "Jumlah terjual");	//untuk membuat keterangan dari list/tabel
	
			//if statement untuk mengecek apakah list kosong atau tidak
			if (liat == NULL){	
				printf("List Kosong!");
			}
			//kombinasi if statement dan while loop untuk display data dari linked list
			if ((*ref) != NULL){
				while (liat != NULL){
					printf("| %-30s | %-20d | %-15d |\n", liat->flavor, liat->price, liat->laku);
					liat = liat->next;
				} 
			}
	
			printf("Masukkan nama varian minuman yang ingin dihapus: ");
			scanf(" %[^\n]s", del_name);
			del_node(&test, del_name);			//memanggil fungsi del_node
		}
	}
	else {
		printf("Kode yang anda masukkan salah, apakah anda ingin kembali ke menu admin?");	//else jika kode salah dimasukkan
		printf("\n1 = Ya\n2 = Menu Awal\nSelain 1 & 2 untuk keluar program");				
		printf("\nMasukkan disini: ");
		scanf("%d", &pilih2);
		
		//if statement untuk kembali ke menu atau keluar program
		if (pilih2 == 1){
			admin(&test);
		}
		else if (pilih2 == 2){
			menu(&test);
		}
		else {
			printf("Terimakasih telah menggunakan program kami!");
		}
	}
}

void konsumen(struct varian** ref){
	struct varian *test = *ref; 			//inisialisasi struct baru untuk passing parameter struct linked list
	int pilih, kodelist, jumlah; 			//inisialisasi variabel yang akan digunakan
	
	printf("Fitur yang tersedia:");
	printf("\n1. List minuman\n2. Pembelian\n3. Pencarian\n4. Kembali ke menu awal");		//pilihan fitur pada program konsumen
	do{																	//do-while loop sebagai error handling
		printf("\nSilahkan pilih fitur: ");
		scanf("%d", &pilih);
		if (pilih != 1 && pilih != 2){
			printf("Masukkan angka yang sesuai!");
		}
		}while (pilih != 1 && pilih != 2 && pilih != 3 && pilih != 4);
	
	if(pilih == 1){
		system("cls");
		printf("List Varian Minuman:\n\n");
		list(&test, &jumlah);													//memanggil fungsi list untuk display data 
	}
	else if(pilih == 2){
		system("cls");
		beli(&test);													//memanggil fungsi beli untuk mengatur pembelian
	}
	else if(pilih == 3){
		system("cls");
		searchlist(&test, 0, 2);										//pencarian minuman
	}
	else if(pilih == 4){
		system("cls");
		menu(&test);													//kembali ke menu awal
	}
}

int input(struct varian** ref){
	struct varian *test2 = *ref;	//inisialisasi struct baru untuk passing parameter struct linked list
	
	char nama[20];					//inisialisasi variabel untuk memasukkan data yang akan diinput
	int harga, jual, jumlah;
	int  i;					//variabel sampingan yang akan digunakan
	
	FILE *buka;							//inisialisasi untuk pointer file
	buka = fopen("file.txt", "a+");	//deklarasi untuk menulis (dari file yang sudah ada) sekaligus membaca file
	
	printf("Masukkan jumlah minuman yang ingin diinput: ");		//dialog untuk meminta jumlah input yang akan dimasukkan
	scanf("%d", &jumlah);
	printf("\n");
	
	for(i = 0; i < jumlah; i++){
		printf("Masukkan varian rasa/nama minuman: ");			//nama/rasa minuman
		scanf(" %[^\n]s", nama);
		printf("Masukkan harga: ");								//harga minuman
		scanf("%d", &harga);
		printf("Masukkan jumlah produk yang sudah terjual: ");  //jumlah laku terjual minuman
		scanf("%d", &jual);
		printf("\n");
		inputlist(&test2, nama, harga, jual);					//memanggil fungsi inputlist untuk memasukkan data ke linked list
	}
	
	struct varian *buat_file = test2;							//inisisalisasi struct baru untuk memindahkan data yang ada di linked list ke file
	
	for(i = 0; i < jumlah; i++){								//looping untuk memindahkan data linked list ke file
		fprintf(buka, "%s;%d;%d\n", buat_file->flavor, buat_file->price, buat_file->laku);		//menulis data ke file
		buat_file = buat_file->next;							//berpindah ke node linked list berikutnya
	}
	
	//menutup file
	fclose(buka);
	//memanggil fungsi back jika ingin kembali ke menu awal atau keluar program
	back(&test2);
}

void inputlist(struct varian** ref, char name[], int harga, int jual){
	struct varian* currentptr;
	struct varian* previousptr;
	struct varian* baru;
	baru = (struct varian*) malloc(sizeof(struct varian));	//inisialisasi struct baru untuk menambah data dari parameter dengan malloc
	
	if(baru != NULL){
		strcpy (baru->flavor, name);			//memindahkan isi dari name ke flavor
		baru->price = harga;					//memindahkan isi dari harga ke price
		baru->laku = jual;						//memindahkan isi dari jual ke laku
		baru->next = NULL;						//node berikutnya dari baru akan menjadi node-node dari ref
		
		previousptr = NULL;						//inisialisasi previousptr dengan NULL
		currentptr = (*ref);					//menyimpan alamat head pada curentptr
		
		while(currentptr != NULL && harga > currentptr->price){		//while statement untuk mengurutkan list varian rasa secara ascending
			previousptr = currentptr;
			currentptr = currentptr->next;
		}
		
		if(previousptr == NULL){				//if statement ketika linked list masih kosong
			baru->next = (*ref);
			(*ref) = baru;
		}
		else{									//menginput data diantara previousptr dan currentptr
			previousptr->next = baru;
			baru->next = currentptr;
		}
	}
}

void list(struct varian** ref, int *jumlah){
	FILE *fptr;							//inisialisasi untuk pointer file
	int i;
	struct varian* previousptr = NULL;	//inisialisasi previousptr
	
	struct varian *liat = *ref;				//inisialisasi struct baru untuk looping display
	
	printf("| %-30s | %-20s | %-15s |\n", "Varian Minuman", "Harga (Rp)", "Jumlah terjual");	//untuk membuat keterangan dari list/tabel
	
	#pragma omp parallel num_threads(1)    //inisialisasi parallel region dengan jumlah thread 1
	{
		struct varian *lokal = liat;		//inisialisasi struct baru untuk looping display sebagai lokal variabel
		#pragma omp single
		//if statement untuk mengecek apakah list kosong atau tidak
		if (lokal == NULL){
			printf("List Kosong!");
		}
		//kombinasi if statement dan while loop untuk display data dari linked list
		if (liat != NULL){
			while (lokal){
			#pragma omp taskwait			//untuk menunggu setiap task selesai
			printf("| %-30s | %-20d | %-15d |\n", lokal->flavor, lokal->price, lokal->laku);
			lokal = lokal->next;
			#pragma omp barrier 			//untuk menunggu setiap threads selesai
			}
		}
	}
	//memanggil fungsi back jika ingin kembali ke menu awal atau keluar program
	back(&(*ref));	
	
}

void beli(struct varian** ref){
	struct varian *liat = *ref;									/*16 line berikutnya mirip dengan fungsi list dengan tujuan mempermudah urutan dan pencarian di 
																line selanjutnya*/
	int i = 1, jumlah, no_minum, kode = 1;						//inisialisasi variabel yang ingin digunakan
		
	printf("%-5s | %-30s | %-20s | %-15s |\n", "No.", "Varian Minuman", "Harga", "Jumlah terjual");
	
	if (liat == NULL){		//pengecekan isi dari list (sebagai error handling)
		printf("Maaf List Kosong...\n");
		printf("Akan kembali ke menu awal dalam 3 detik...");
		sleep(3);
		system("cls");
		menu(&(*ref));
	}
	if (*ref != NULL){		//pengecekan isi linked list dan menampilkan list
		while (liat != NULL){
		printf("%-5d | %-30s | %-20d | %-15d |\n", i, liat->flavor, liat->price, liat->laku);
		liat = liat->next;
		i++;
		} 
	}
	
	int total_beli = 0;
	int pilih = 0;
	
	struct varian *buat_search = *ref;
	printf("Masukkan jumlah minuman yang dibeli: ");		//meminta user untuk memasukkan nomor minuman yang dibeli dari list 
	scanf("%d", &jumlah);
	int hasil_tambah[150];
	
	for (i = 0; i < jumlah; i++){							//loop untuk membeli minuman
		printf("Masukkan nomor minuman ke-%d yang dibeli: ", i+1);
		scanf("%d", &no_minum);

		do{													//do-while sebagai error handling
			printf("Apakah pilihan anda sudah benar? 1 jika Ya dan 2 jika Tidak: ");
			scanf("%d", &pilih);
			
			if (pilih != 1 && pilih != 2){
				printf("Pilih 1 atau 2!\n");
			}
		}while (pilih != 1 && pilih != 2);
		
		if (pilih == 1){
			hasil_tambah[i] = searchlist(&(*ref), no_minum, 1);	//memanggil fungsi searchlist untuk menambah jumlah terjual/laku minuman yang dibeli
		}
		else if (pilih == 2){									//opsi untuk kesalahan input minuman
			printf("Masukkan ulang nomor minuman: ");
			scanf("%d", &no_minum);
			hasil_tambah[i] = searchlist(&(*ref), no_minum, 1);
		}
	}
	
	int jumlah_harga = 0;
	
	#pragma omp parallel					//parallel region
	{
		int sum = 0;
		#pragma omp for						//pragma omp for untuk menjumlahkan total harga di tiap thread
			for (i = 0; i < jumlah;i++){
			sum += hasil_tambah[i];
			}
		#pragma omp critical				//pragma omp critical untuk menjumlahkan tiap total harga yang didapat di tiap thread
			jumlah_harga += sum;
	}
	printf("\nTotal harga adalah %d\nMenunggu hasil pembayaran...", jumlah_harga);
	
	//memanggil fungsi back jika ingin kembali ke menu awal atau keluar program
	back(&(*ref));
}

int searchlist(struct varian** ref, int nomor, int kode){	//parameter kode untuk membedakan tujuan search minuman
	struct varian *temp = *ref;								//inisialisasi struct baru untuk search
	
	int i = 1; 
	int hasil;												//inisialisasi variabel yang dibutuhkan
	 
	if (kode == 1){											//kode untuk search + tambah jumlah harga terjual
		if (temp == NULL){									//cek apabila isi dari list ada atau tidak
			printf("Data belum dimasukkan!");				//pesan error
		}
		if (temp != NULL){									//kombinasi if dan while loop untuk search
			while (temp != NULL){							
				if (i == nomor){							//search nomor yang dicari 
					hasil = temp->price;
					temp = NULL;
				}
				else {
					i++;
					temp = temp->next;
				}
			}
		}
	}
	else if(kode == 2){										
		char nama[20];
		printf("Masukkan nama minuman yang ingin dicari: ");	
		scanf(" %[^\n]s", nama);				
		if (temp == NULL){									//error handling
			printf("Data belum dimasukkan!");		
		}
		if (temp != NULL){									//mencari minuman yang ingin dicari dan menampilkannya
			while (temp != NULL){
				if (strcmpi(temp->flavor, nama) == 0){
					printf("Nama : %s\nHarga : Rp. %d\nJumlah Terjual: %d\n", temp->flavor, temp->price, temp->laku);
				}
				temp = temp->next;
			}
		}
		back(&(*ref));
	}
	return hasil; 		//return variabel hasil untuk pencarian total harga
}

void back(struct varian** ref){
	struct varian *end = *ref;					//inisialisasi struct baru
	int pilih;
	printf("\n\nPilih 1 untuk kembali ke menu awal dan selain 1 untuk keluar program\n");
	scanf("%d", &pilih);
	
	switch (pilih){
		case 1 :							//kembali ke menu awal
		system("cls");
		menu(&end);
		break;
		
		default:							//keluar program
		system("cls");
		printf("Terimakasih telah menggunakan program kami!"); 
	}
}

void del_node(struct varian** ref, char name[]){
	int i;
	struct varian* buat_tulis;						//inisialisasi struct baru untuk print
	struct varian* currentptr = *ref;				//inisialisasi struct baru untuk proses penghapusan node
	struct varian* tempptr = *ref, *previous;
	
	FILE *tulis;									//inisialisasi untuk pointer file
	
	tulis = fopen("file.txt", "w+");				//membuka file.txt dengan mode tulis, sehingga list akan diupdate sesuai list setelah dihapus nantinya 
	
	if (tempptr != NULL && strcmpi(tempptr->flavor, name) == 0){		//mengecek apakah nama varian rasa yang dimasukkan sama dengan di node pertama
		currentptr = tempptr->next;
		system("cls");
		printf("%s telah terhapus\n", tempptr->flavor);
		free(tempptr);						//menghapus node varian rasa
		previous = currentptr;
		
		while(currentptr != NULL){			//menulis isi linked list yang baru ke file
			fprintf(tulis, "%s;%d;%d\n", currentptr->flavor, currentptr->price, currentptr->laku);
			currentptr = currentptr->next;
		}
		fclose(tulis);
	}
	else {								//pengecekan lokasi nama varian rasa di linked list
		while (tempptr != NULL && strcmpi(tempptr->flavor, name) != 0){
			previous = tempptr;
			tempptr = tempptr->next;
		}
	
		system("cls");
		printf("%s telah terhapus\n", tempptr->flavor);
	
		if (tempptr == NULL){
			printf("\nMinuman tidak ada di daftar");
			back(&(*ref));
		}
	
		previous->next = tempptr->next;
		free(tempptr);						//menghapus node varian rasa
	
		currentptr = previous;

		while(currentptr != NULL){				//menulis isi linked list yang baru ke file
			fprintf(tulis, "%s;%d;%d\n", currentptr->flavor, currentptr->price, currentptr->laku);
			currentptr = currentptr->next;
		}
		fclose(tulis);
	}
	
	back(&previous);						//memanggil fungsi back
}
